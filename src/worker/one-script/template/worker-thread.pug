import BaseAction from '../common/base-action';
import { <%=WorkerActionName%>ActionType } from '../common/action-type';
import Controller from './controller';

/**
 *
 */
export default class <%=WorkerActionName%> extends BaseAction {
    constructor(controller: Controller) {
        super(controller);
    }

    protected addActionHandler(): void {
        this.controller.addActionHandler(<%=WorkerActionName%>ActionType.__MainCallWorker__, this.__MainCallWorker__.bind(this));
    }

    /**
     * 响应主线程的处理器
     */
    async __MainCallWorker__(
        payload: WorkerPayload.<%=WorkerActionName%>.__MainCallWorker__ = '1024'
    ): Promise<WorkerReponse.<%=WorkerActionName%>.__MainCallWorker__> {
        // 通过 async await 实现异步逻辑
        await new Promise((resolve) => {
            setTimeout(() => {
                resolve();
            }, 1000);
        });

        // 1000ms 后再返回结果
        const response = Number(payload);
        return response;
    }

    /**
     * Worker 线程去调用主线程
     */
    __WorkerCallMain__(
        payload: WorkerPayload.<%=WorkerActionName%>.__WorkerCallMain__ = {
            hello: -1,
            world: +1,
        }
    ): Promise<WorkerReponse.<%=WorkerActionName%>.__WorkerCallMain__> {
        return this.controller.requestPromise(<%=WorkerActionName%>ActionType.__WorkerCallMain__, payload);
    }
}
