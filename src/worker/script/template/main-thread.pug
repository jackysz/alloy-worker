import BaseAction from '../common/base-action';
import { <%=WorkerActionName%>ActionType } from '../common/action-type';
import Controller from './controller';

/**
 * 
 */
export default class <%=WorkerActionName%> extends BaseAction {
    constructor(controller: Controller) {
        super(controller);
    }

    protected addActionHandler(): void {
        this.controller.addActionHandler(
            <%=WorkerActionName%>ActionType._B_,
            this.<%=WorkerActionName%>_B_Handler.bind(this)
        );
    }

    <%=WorkerActionName%>_A_(payload: WorkerPayload.<%=WorkerActionName%>.__A): Promise<WorkerReponse.<%=WorkerActionName%>.__A> {
        return this.controller.requestPromise(<%=WorkerActionName%>ActionType._A_, payload);
    }

    <%=WorkerActionName%>_B_Handler(
        payload: WorkerPayload.<%=WorkerActionName%>.__B
    ): WorkerReponse.<%=WorkerActionName%>.__B {
        const response = {
            alloy: payload.hello.toString(),
            worker: payload.world.toString(),
        };
        return response;
    }
}
